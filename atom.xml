<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Prettyxfan&#39;s Den</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-10-03T03:52:15.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>prettyxfan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Objective-C关联对象</title>
    <link href="http://yoursite.com/2016/10/02/Objective-C%E5%85%B3%E8%81%94%E5%AF%B9%E8%B1%A1/"/>
    <id>http://yoursite.com/2016/10/02/Objective-C关联对象/</id>
    <published>2016-10-02T13:56:46.000Z</published>
    <updated>2016-10-03T03:52:15.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>《Effective Objective-C 2.0》学习笔记及扩展系列</em></p>
<h3 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h3><p>有时候需要在对象中存放相关信息，这时我们通常会从对象所属的类中继承一个子类，然后用这个子类对象。然而并非所有的情况下都能这么做，有时候类的实例可能是由某种机制所创建的，而开发者无法令这种机制创建出自己所需要的子类实例，所以在 iOS 开发中经常需要使用分类（category）为已经存在的类添加属性，但使用<code>@property</code>并不能在分类中正确创建实例变量和存取方法。前一篇文章中已经说过，OC 里面用属性的话编译器会自动帮你生成实例变量、生成存取方法。但在分类中添加一个属性：<br><a id="more"></a><br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">DKObject</span> (<span class="title">Category</span>)</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSString</span> *categoryProperty;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure></p>
<p>Build 之后会有警告：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Property <span class="string">"categoryProperty"</span> requires method <span class="string">"categoryProperty"</span> to be defined - use <span class="keyword">@dynamic</span> or provide a method implementation <span class="keyword">in</span> <span class="keyword">this</span> category</div><div class="line">Property <span class="string">"categoryProperty"</span> requires method <span class="string">"setCategoryProperty:"</span> to be defined - use <span class="keyword">@dynamic</span> or provide a method implementation <span class="keyword">in</span> <span class="keyword">this</span> category</div></pre></td></tr></table></figure></p>
<p>从这个警告可以看出，编译器并没有为属性 categoryProperty 自动生成 getter 和 setter 方法，需要自己实现或者使用 @dynamic 在运行时实现这些方法。这个时候就需要借助 Objective-C 的一项强大的特性——“关联对象”（Associated Object）。</p>
<h3 id="使用关联对象"><a href="#使用关联对象" class="headerlink" title="使用关联对象"></a>使用关联对象</h3><p>可以给对象关联许多其他对象，这些对象通过“键”来区分，存储对象值的时候可以致命“存储策略”，用以维护相应的“内存管理语义”。存储策略由名为 objc_AssociationPolicy 的枚举所定义，对应关系如下所示：</p>
<table>
<thead>
<tr>
<th>关联类型</th>
<th>等效的 @property 属性</th>
</tr>
</thead>
<tbody>
<tr>
<td>OBJC_ASSOCIATION_ASSIGN</td>
<td>@property (assign) or @property (unsafe_unretained)</td>
</tr>
<tr>
<td>OBJC_ASSOCIATION_RETAIN_NONATOMIC</td>
<td>@property (nonatomic, strong)</td>
</tr>
<tr>
<td>OBJC_ASSOCIATION_COPY_NONATOMIC</td>
<td>@property (nonatomic, copy)</td>
</tr>
<tr>
<td>OBJC_ASSOCIATION_RETAIN</td>
<td>@property (atomic, strong)</td>
</tr>
<tr>
<td>OBJC_ASSOCIATION_COPY</td>
<td>@property (atomic, copy)</td>
</tr>
</tbody>
</table>
<p>可以用下列方法管理关联对象：</p>
<ul>
<li>用给定的键和策略为某对象设置关联对象值</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> objc_setAssociatedObject (<span class="keyword">id</span> object, <span class="keyword">void</span> *key, <span class="keyword">id</span> value, objc_AssociationPolicy policy)</div></pre></td></tr></table></figure>
<ul>
<li>根据给定的键从某对象中获取相应的关联对象值</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">id</span> objc_getAssociatedObject (<span class="keyword">id</span> object, <span class="keyword">void</span> *key)</div></pre></td></tr></table></figure>
<ul>
<li>移除指定对象的全部关联对象</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> objc_removeAssociatedObjects (<span class="keyword">id</span> object)</div></pre></td></tr></table></figure>
<p>可以把某对象想象成 NSDictionary，把关联到该对象的值理解为字典中的条目，存取关联对象的值就相当于在 NSDictionary 对象上调用 <code>[object setObject: value]</code> 和 <code>[object objectForKey: key]</code> 方法。这两者的差别是：设置关联对象时用的 Key 是个“不透明的指针”。如果在两个键上调用”isEqual:”方法的返回值是 YES，那么 NSDictionary 就认为二者相同；然而在设置关联对象值时，若想令两个键匹配到同一个值，则二者必须时完全相同的指针才行。鉴于此，设置关联对象时，通常用静态全局变量作为键。</p>
<p>比如说给 NSObject 加一个 category：</p>
<p><code>NSObject+AssociatedObject.h</code><br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSObject</span> (<span class="title">AssociatedObject</span>)</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="keyword">id</span> associatedObject;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure></p>
<p><code>NSObject+AssociatedObject.m</code><br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSObject</span> (<span class="title">AssociatedObject</span>)</span></div><div class="line"><span class="keyword">@dynamic</span> associatedObject;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)setAssociatedObject:(<span class="keyword">id</span>)object &#123;</div><div class="line">    objc_setAssociatedObject(<span class="keyword">self</span>, <span class="keyword">@selector</span>(associatedObject), object, OBJC_ASSOCIATION_RETAIN_NONATOMIC);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">id</span>)associatedObject &#123;</div><div class="line">    <span class="keyword">return</span> objc_getAssociatedObject(<span class="keyword">self</span>, <span class="keyword">@selector</span>(associatedObject));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong> 注：为什么传入的是 <code>@selector(associatedObject)</code>? </strong></p>
<p>@selector(associatedObject) 也就是参数中的 key，其实可以使用静态指针 static void * 类型的参数来代替，如下所示：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">char</span> kAssociatedObjectKey;</div><div class="line">objc_getAssociatedObject(<span class="keyword">self</span>, &amp;kAssociatedObjectKey);</div></pre></td></tr></table></figure></p>
<p>不过使用 @selector(associatedObject) 作为 key 传入，即省略了声明参数的代码，又能很好地保证 key 的唯一性。</p>
<h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>按照 Mattt Thompson 大神的文章 <a href="http://nshipster.com/associated-objects/" target="_blank" rel="external">Associated Objects</a> 中的说法，Associated Objects 主要有以下三个使用场景：</p>
<ol>
<li>为现有的类添加私有变量以帮助实现细节</li>
<li>为现有的类添加公有属性</li>
<li>为 KVO 创建一个关联的观察者。</li>
</ol>
<h3 id="最后再来一个不在-category-中使用的栗子"><a href="#最后再来一个不在-category-中使用的栗子" class="headerlink" title="最后再来一个不在 category 中使用的栗子"></a>最后再来一个不在 category 中使用的栗子</h3><p>这个例子的出处是<a href="http://kingscocoa.com/tutorials/associated-objects/" target="_blank" rel="external">King’s Cocoa - Objective-C Associated Objects</a>。</p>
<p>考虑一下这种情况，有一个 TableView，当左滑删除一行时，弹出一个确认的对话框。点击确定后才删除。这个时候就需要在弹出对话框的时候记录一下 cell 的 indexPath，然后在 UIAlertView 的代理里面判断用户是否按了“确认键”，按了确认之后根据记录的 indexPath 来删除 tableView 中的一行。（这个问题其实已经解决了，不要用 UIAlertView 直接用 UIAlertController 就好了，这样不用写代理了。不过为了说明问题还是可以拿来看看 ˊ_&gt;ˋ）</p>
<p><strong>原始的解决方案</strong><br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MasterViewController</span> () &lt;<span class="title">UIAlertViewDelegate</span>&gt; </span>&#123;</div><div class="line">    <span class="built_in">NSMutableArray</span> *_objects;</div><div class="line">    <span class="built_in">NSIndexPath</span> *_indexPathToDelete;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// ...</span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)tableView:(<span class="built_in">UITableView</span> *)tableView commitEditingStyle:(<span class="built_in">UITableViewCellEditingStyle</span>)editingStyle forRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (editingStyle == <span class="built_in">UITableViewCellEditingStyleDelete</span>) &#123;</div><div class="line">        <span class="built_in">NSString</span> *deleteMessage = <span class="string">@"Are you sure you want to delete this super important thing?"</span>;</div><div class="line">        <span class="built_in">UIAlertView</span> *deleteConfirmation = [[<span class="built_in">UIAlertView</span> alloc] initWithTitle:<span class="string">@"Delete Row"</span> message:deleteMessage delegate:<span class="keyword">self</span> cancelButtonTitle:<span class="string">@"Cancel"</span> otherButtonTitles:<span class="string">@"Confirm"</span>, <span class="literal">nil</span>];</div><div class="line">        _indexPathToDelete = indexPath;</div><div class="line">        [deleteConfirmation show];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// ...</span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)alertView:(<span class="built_in">UIAlertView</span> *)alertView didDismissWithButtonIndex:(<span class="built_in">NSInteger</span>)buttonIndex</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (buttonIndex == <span class="number">1</span>) &#123;</div><div class="line">        [_objects removeObjectAtIndex:_indexPathToDelete.row];</div><div class="line">        [_tableView deleteRowsAtIndexPaths:@[_indexPathToDelete] withRowAnimation:<span class="built_in">UITableViewRowAnimationFade</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>解决方案1</strong><br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;objc/runtime.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">char</span> deleteKey;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MasterViewController</span> ()&lt;<span class="title">UIAlertViewDelegate</span>&gt; </span>&#123;</div><div class="line">    <span class="built_in">NSMutableArray</span> *_objects;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// ...</span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)tableView:(<span class="built_in">UITableView</span> *)tableView commitEditingStyle:(<span class="built_in">UITableViewCellEditingStyle</span>)editingStyle forRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (editingStyle == <span class="built_in">UITableViewCellEditingStyleDelete</span>) &#123;</div><div class="line">        <span class="built_in">NSString</span> *deleteMessage = <span class="string">@"Are you sure you want to delete this super important thing?"</span>;</div><div class="line">        <span class="built_in">UIAlertView</span> *deleteConfirmation = [[<span class="built_in">UIAlertView</span> alloc] initWithTitle:<span class="string">@"Delete Row"</span> message:deleteMessage delegate:<span class="keyword">self</span> cancelButtonTitle:<span class="string">@"Cancel"</span> otherButtonTitles:<span class="string">@"Confirm"</span>, <span class="literal">nil</span>];</div><div class="line">        objc_setAssociatedObject(deleteConfirmation, &amp;deleteKey, indexPath, OBJC_ASSOCIATION_RETAIN);</div><div class="line">        [deleteConfirmation show];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// ...</span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)alertView:(<span class="built_in">UIAlertView</span> *)alertView didDismissWithButtonIndex:(<span class="built_in">NSInteger</span>)buttonIndex</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (buttonIndex == <span class="number">1</span>) &#123;</div><div class="line">        <span class="built_in">NSIndexPath</span> *deletePath = objc_getAssociatedObject(alertView, &amp;deleteKey);</div><div class="line">        [_objects removeObjectAtIndex:deletePath.row];</div><div class="line">        [_tableView deleteRowsAtIndexPaths:@[deletePath] withRowAnimation:<span class="built_in">UITableViewRowAnimationFade</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>解决方案2——用 Category</strong><br><code>NSObject+AssociatedObjects.h</code><br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSObject</span> (<span class="title">AssociatedObjects</span>)</span></div><div class="line">- (<span class="keyword">void</span>)associateValue:(<span class="keyword">id</span>)value withKey:(<span class="keyword">void</span> *)key;</div><div class="line">- (<span class="keyword">id</span>)associatedValueForKey:(<span class="keyword">void</span> *)key;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure></p>
<p><code>NSObject+AssociatedObjects.m</code><br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"NSObject+AssociatedObjects.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;objc/runtime.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSObject</span> (<span class="title">AssociatedObjects</span>)</span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)associateValue:(<span class="keyword">id</span>)value withKey:(<span class="keyword">void</span> *)key</div><div class="line">&#123;</div><div class="line">    objc_setAssociatedObject(<span class="keyword">self</span>, key, value, OBJC_ASSOCIATION_RETAIN);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">id</span>)associatedValueForKey:(<span class="keyword">void</span> *)key</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> objc_getAssociatedObject(<span class="keyword">self</span>, key);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure></p>
<p>最终代码变为：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"NSObject+AssociatedObjects.h"</span></span></div><div class="line"><span class="keyword">static</span> <span class="keyword">char</span> deleteKey;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MasterViewController</span> () &lt;<span class="title">UIAlertViewDelegate</span>&gt; </span>&#123;</div><div class="line">    <span class="built_in">NSMutableArray</span> *_objects;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// ...</span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)tableView:(<span class="built_in">UITableView</span> *)tableView commitEditingStyle:(<span class="built_in">UITableViewCellEditingStyle</span>)editingStyle forRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (editingStyle == <span class="built_in">UITableViewCellEditingStyleDelete</span>) &#123;</div><div class="line">        <span class="built_in">NSString</span> *deleteMessage = <span class="string">@"Are you sure you want to delete this super important thing?"</span>;</div><div class="line">        <span class="built_in">UIAlertView</span> *deleteConfirmation = [[<span class="built_in">UIAlertView</span> alloc] initWithTitle:<span class="string">@"Delete Row"</span> message:deleteMessage delegate:<span class="keyword">self</span> ancelButtonTitle:<span class="string">@"Cancel"</span> otherButtonTitles:<span class="string">@"Confirm"</span>, <span class="literal">nil</span>];</div><div class="line">        [deleteConfirmation associateValue:indexPath withKey:&amp;deleteKey];</div><div class="line">        [deleteConfirmation show];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// ...</span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)alertView:(<span class="built_in">UIAlertView</span> *)alertView didDismissWithButtonIndex:(<span class="built_in">NSInteger</span>)buttonIndex</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (buttonIndex == <span class="number">1</span>) &#123;</div><div class="line">        <span class="built_in">NSIndexPath</span> *deletePath = [alertView associatedValueForKey:&amp;deleteKey];</div><div class="line">         [_objects removeObjectAtIndex:deletePath.row];</div><div class="line">         [_tableView deleteRowsAtIndexPaths:@[deletePath] withRowAnimation:<span class="built_in">UITableViewRowAnimationFade</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>解决方案3</strong></p>
<p><code>UIAlertView+DeleteConfirmation.h</code><br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">UIAlertView</span> (<span class="title">DeleteConfirmation</span>)</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">NSIndexPath</span> *indexPathToDelete;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure></p>
<p><code>UIAlertView+DeleteConfirmation.m</code><br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"UIAlertView+DeleteConfirmation.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"NSObject+AssociatedObjects.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">UIAlertView</span> (<span class="title">DeleteConfirmation</span>)</span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)setIndexPathToDelete:(<span class="built_in">NSIndexPath</span> *)indexPathToDelete</div><div class="line">&#123;</div><div class="line">    [<span class="keyword">self</span> associateValue:indexPathToDelete withKey:<span class="keyword">@selector</span>(indexPathToDelete)];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">NSIndexPath</span> *)indexPathToDelete</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> associatedValueForKey:<span class="keyword">@selector</span>(indexPathToDelete)];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure></p>
<p>最终代码变为：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"UIAlertView+DeleteConfirmation.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MasterViewController</span> () &lt;<span class="title">UIAlertViewDelegate</span>&gt; </span>&#123;</div><div class="line">    <span class="built_in">NSMutableArray</span> *_objects;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// ...</span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)tableView:(<span class="built_in">UITableView</span> *)tableView commitEditingStyle:(<span class="built_in">UITableViewCellEditingStyle</span>)editingStyle forRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (editingStyle == <span class="built_in">UITableViewCellEditingStyleDelete</span>) &#123;</div><div class="line">        <span class="built_in">NSString</span> *deleteMessage = <span class="string">@"Are you sure you want to delete this super important thing?"</span>;</div><div class="line">        <span class="built_in">UIAlertView</span> *deleteConfirmation = [[<span class="built_in">UIAlertView</span> alloc] initWithTitle:<span class="string">@"Delete Row"</span></div><div class="line">        message:deleteMessage</div><div class="line">        delegate:<span class="keyword">self</span></div><div class="line">        cancelButtonTitle:<span class="string">@"Cancel"</span></div><div class="line">        otherButtonTitles:<span class="string">@"Confirm"</span>, <span class="literal">nil</span>];</div><div class="line">        </div><div class="line">        deleteConfirmation.indexPathToDelete = indexPath;</div><div class="line">        [deleteConfirmation show];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// ...</span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)alertView:(<span class="built_in">UIAlertView</span> *)alertView didDismissWithButtonIndex:(<span class="built_in">NSInteger</span>)buttonIndex</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (buttonIndex == <span class="number">1</span>) &#123;</div><div class="line">        <span class="built_in">NSIndexPath</span> *deletePath = alertView.indexPathToDelete;</div><div class="line">        [_objects removeObjectAtIndex:deletePath.row];</div><div class="line">        [_tableView deleteRowsAtIndexPaths:@[deletePath] withRowAnimation:<span class="built_in">UITableViewRowAnimationFade</span>];</div><div class="line">    &#125;</div><div class="line">&#125;   </div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;《Effective Objective-C 2.0》学习笔记及扩展系列&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;举个栗子&quot;&gt;&lt;a href=&quot;#举个栗子&quot; class=&quot;headerlink&quot; title=&quot;举个栗子&quot;&gt;&lt;/a&gt;举个栗子&lt;/h3&gt;&lt;p&gt;有时候需要在对象中存放相关信息，这时我们通常会从对象所属的类中继承一个子类，然后用这个子类对象。然而并非所有的情况下都能这么做，有时候类的实例可能是由某种机制所创建的，而开发者无法令这种机制创建出自己所需要的子类实例，所以在 iOS 开发中经常需要使用分类（category）为已经存在的类添加属性，但使用&lt;code&gt;@property&lt;/code&gt;并不能在分类中正确创建实例变量和存取方法。前一篇文章中已经说过，OC 里面用属性的话编译器会自动帮你生成实例变量、生成存取方法。但在分类中添加一个属性：&lt;br&gt;
    
    </summary>
    
      <category term="iOS 学习笔记" scheme="http://yoursite.com/categories/iOS-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Objective-C" scheme="http://yoursite.com/tags/Objective-C/"/>
    
      <category term="关联对象" scheme="http://yoursite.com/tags/%E5%85%B3%E8%81%94%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>Objective-C属性</title>
    <link href="http://yoursite.com/2016/10/02/Objective-C%E5%B1%9E%E6%80%A7/"/>
    <id>http://yoursite.com/2016/10/02/Objective-C属性/</id>
    <published>2016-10-02T08:38:27.000Z</published>
    <updated>2016-10-03T03:51:33.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>《Effective Objective-C 2.0》学习笔记及扩展系列</em></p>
<h3 id="理解属性的概念"><a href="#理解属性的概念" class="headerlink" title="理解属性的概念"></a>理解属性的概念</h3><p>“属性”是 OC 的一项特性，用于封装对象中的数据。在 Java、C++ 中都是这样声明实例变量的：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">EOCPerson</span>: <span class="title">NSObject</span> </span>&#123;</div><div class="line"><span class="keyword">@public</span></div><div class="line">	<span class="built_in">NSString</span> *_firstName;</div><div class="line">	<span class="built_in">NSString</span> *_lastName;</div><div class="line"><span class="keyword">@private</span></div><div class="line">	<span class="built_in">NSString</span> *_someInternalData;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>OC 一般不这样干，因为这种写法存在一些问题：对象布局在编译期就已经固定了，只要碰到访问 _firstName 变量的代码，编译器就吧其替换为“偏移量”，这个偏移量是“硬编码”，表示该变量距离存放对象的内存区域的起始地址有多远。但如果又加了一个实例变量，变量间的位置变化了，就需要在修改类定义之后重新编译。<br><a id="more"></a></p>
<p><strong>OC 把实例变量当作一种存储偏移量所用的“特殊变量”，交由“类对象”保管</strong>。偏移量会在运行期查找，如果类的定义变了，那么存储的偏移量也就变了。这样无论何时访问实例变量，总能使用正确的偏移量。甚至可以在运行期间向类中增加新的实例变量，这就是稳固的“应用程序二进制接口”（ABI）。ABI 定义了许多内容，其中一项就是生成代码时所遵循的规范。有了这种“稳固的”ABI，我们就可以在“class-continuation分类”或实现文件中定义实例变量。<strong>所以说不一定要在借口中把全部的实例变量都声明号，可以将某些变量从接口的 public 区段里移走，以便保护与类实现相关的内部信息。还有就是尽量不要直接访问实例变量，而应该通过存取方法来做。</strong>虽说属性最终还是通过实例变量来实现，但它提供了一种简洁的抽象机制。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">EOCPerson</span>: <span class="title">NSObject</span></span></div><div class="line"><span class="keyword">@property</span> <span class="built_in">NSString</span> *firstName;</div><div class="line"><span class="keyword">@property</span> <span class="built_in">NSString</span> *lastName;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="comment">// 等价于</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">EOCPerson</span>: <span class="title">NSObject</span> </span>&#123;</div><div class="line"><span class="keyword">@public</span></div><div class="line">	<span class="built_in">NSString</span> *_firstName;</div><div class="line">	<span class="built_in">NSString</span> *_lastName;</div><div class="line">&#125;</div><div class="line">- (<span class="built_in">NSString</span> *)firstName;</div><div class="line">- (<span class="keyword">void</span>)setFirstName: (<span class="built_in">NSString</span> *)firstName;</div><div class="line">- (<span class="built_in">NSString</span> *)lastName;</div><div class="line">- (<span class="keyword">void</span>)setLastName: (<span class="built_in">NSString</span> *)lastName;	</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>使用属性的话，编译器就会自动生成访问这些属性所需的方法，这个过程叫“自动合成”（整个过程在编译期执行，故代码里看不到合成的代码）。而且编译器还会自动向类中添加适当类型的实例变量（名字就是属性名前加下划线）。也可以在类的实现代码里通过 @synthesize 语法来指定实例变量的名字。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">EOCPerson</span></span></div><div class="line"><span class="keyword">@synthesize</span> firstName = _firstName;</div><div class="line"><span class="keyword">@synthesize</span> lastName = _lastName;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>如果不想由编译器自动合成存取方法，也可以自己写。自己实现存取方法中的一个后，编译器会帮你完成剩下的一个。如果两个都自己实现了的话，就要手动指定实例变量的名字。使用 @dynamic 关键字可以阻止编译器自动合衬存取方法（告诉编译器不要自动创建实现属性所用的实例变量和存取方法），就算编译器在编译时没有发现定义的存取方法也不会报错，它坚信能在运行期间找到。</p>
<h3 id="属性特质"><a href="#属性特质" class="headerlink" title="属性特质"></a>属性特质</h3><p>看一下下面属性的定义：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readwrite</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *firstName;</div></pre></td></tr></table></figure>
<p>属性可以拥有的特质分为四类：</p>
<ul>
<li><p>原子性</p>
<ul>
<li>atomic：由编译器合成的方法会通过锁定机制确保原子性，一般不写的时候默认就是atomic</li>
<li>nonatomic：不使用同步锁</li>
</ul>
</li>
<li><p>读写权限</p>
<ul>
<li>readwrite：拥有 getter 和 setter</li>
<li>readonly：只有 getter</li>
</ul>
</li>
<li><p>内存管理语义</p>
<ul>
<li>assign：setter 只会针对“存量类型”的简单赋值操作</li>
<li>strong：表明该属性定义了一种“拥有关系”，为这种属性设置新值时，设置方法会先保留新值，并释放旧值，然后再将新值设置上去</li>
<li>weak：表明该属性定义了一种“非拥有关系”，为这种属性设置新值时，设置方法既不保留新值，也不释放旧值，此特性和 assgin 类似，然而属性所指的对象遭到摧毁时，属性值也会设置为 nil</li>
<li>unsage_unretained：此特性的语义和 assign 相同，但只适用于“对象类型”，定义了一种“非拥有关系”，属性所指的对象遭到摧毁时，属性值不会清空，这和weak有区别</li>
<li><p>copy：此特质所表达的所属关系和 strong 类似。然而设置方法并不保留新值，而是将其“拷贝”。当属性类型为 NSString* 时，经常用此特性来保护其封装性。因为传递给 setter 方法的新值可能指向一个 NSMutableString 类的实例。NSMutableString 是 NSString 的子类，此时如果不拷贝字符串，那么设置完之后，字符串可能会在对象不知情的情况下遭人更改。所以就需要拷贝一份不可变的字符串。</p>
<p><strong>注意：</strong></p>
<p>比如把一个属性加上了 copy 特性，那么如果你写了一个init方法，方法里面要对这个属性赋值，那么也要copy一个值而不是直接赋值。<br>eg：</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *firstName;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *lastName;</div><div class="line"></div><div class="line">- (<span class="keyword">id</span>) initWithFistName: (<span class="built_in">NSString</span> *)firstName lastName:(<span class="built_in">NSString</span> *)lastName &#123;</div><div class="line">	<span class="keyword">if</span> ((<span class="keyword">self</span> = [<span class="keyword">super</span> init])) &#123;</div><div class="line">		_firstName = [firstName <span class="keyword">copy</span>];</div><div class="line">		_lastName = [lastName <span class="keyword">copy</span>];</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>方法名</p>
<ul>
<li><code>getter=&lt;name&gt;</code> ：指定 getter 方法名</li>
<li><code>setter=&lt;name&gt;</code> ：指定 setter 方法名</li>
</ul>
</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">getter</span> = isOn) Bool on;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;《Effective Objective-C 2.0》学习笔记及扩展系列&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;理解属性的概念&quot;&gt;&lt;a href=&quot;#理解属性的概念&quot; class=&quot;headerlink&quot; title=&quot;理解属性的概念&quot;&gt;&lt;/a&gt;理解属性的概念&lt;/h3&gt;&lt;p&gt;“属性”是 OC 的一项特性，用于封装对象中的数据。在 Java、C++ 中都是这样声明实例变量的：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;EOCPerson&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@public&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *_firstName;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *_lastName;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@private&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *_someInternalData;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;OC 一般不这样干，因为这种写法存在一些问题：对象布局在编译期就已经固定了，只要碰到访问 _firstName 变量的代码，编译器就吧其替换为“偏移量”，这个偏移量是“硬编码”，表示该变量距离存放对象的内存区域的起始地址有多远。但如果又加了一个实例变量，变量间的位置变化了，就需要在修改类定义之后重新编译。&lt;br&gt;
    
    </summary>
    
      <category term="iOS 学习笔记" scheme="http://yoursite.com/categories/iOS-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Objective-C" scheme="http://yoursite.com/tags/Objective-C/"/>
    
      <category term="属性" scheme="http://yoursite.com/tags/%E5%B1%9E%E6%80%A7/"/>
    
  </entry>
  
</feed>
